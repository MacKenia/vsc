import urllib
import urllib2
import sys
import ssl


host = 'https://302307.market.alicloudapi.com'
path = '/ocr/captcha'
method = 'POST'
appcode = 'cad56c434d124a17a7d990ae746ffa07'
querys = ''
bodys = {}
url = host + path

bodys['image'] = ''''''
bodys['maxlength'] = '''maxlength'''
bodys['minlength'] = '''minlength'''
bodys['type'] = '''1001'''
post_data = urllib.urlencode(bodys)
request = urllib2.Request(url, post_data)
request.add_header('Authorization', 'APPCODE ' + appcode)
# 根据API的要求，定义相对应的Content-Type
request.add_header(
    'Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
response = urllib2.urlopen(request, context=ctx)
content = response.read()
if (content):
    print(content)
